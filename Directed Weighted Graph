import networkx as nx
import matplotlib.pyplot as plt
import random


# ----- Settings for Directed Graph -----
directedGraphNodesAmount = 10
directedGraphComplete = True # Connects each node to each other node
directedGraphRandomEdgeDeletion = 50 # Delete some edges at random


# ----- Creation of Directed Graph -----
directedGraph = nx.DiGraph()
directedGraph.add_nodes_from(range(0,directedGraphNodesAmount-1))


# Edges have the shape: 
# (nodeFrom, nodeTo, optional:{weight=3.4, color=(R,G,B)} )

if directedGraphComplete:
   for i in range(0,directedGraphNodesAmount-1):
      for j in range(0, directedGraphNodesAmount-1):
         directedGraph.add_edge(i,j)

if directedGraphRandomEdgeDeletion:
   for i in range(0, directedGraphNodesAmount):
      if ( random.random() < directedGraphRandomEdgeDeletion ):
         j = int(random.random()*directedGraphNodesAmount + i %directedGraphNodesAmount
         if directedGraph.
         directedGraph.remove_edge(i,
         int(random.random()*directedGraphNodesAmount + i)%directedGraphNodesAmount
         )



# ----- Drawing options Directed Graph -----

# For documentation on options, see 
# https://github.com/networkx/networkx/blob/master/networkx/drawing/nx_pylab.py

nx.draw_kamada_kawai(directedGraph)
position = nx.kamada_kawai_layout(directedGraph)
arrows = True
with_labels = True

nodeSizes = [1]*directedGraphNodesAmount
for i in range(0, directedGraphNodesAmount-1):
   nodeSizes[i] = i**2

directedGraphDrawOptions = {
   'node_color': 'blue',
   'node_size': nodeSizes,
   'width': .4,
   'arrowsize': .3
}


# ----- Drawing and Showing Directed Graph -----
nx.draw_networkx(
   directedGraph, 
   position, 
   arrows = True, 
   with_labels=False,
   **directedGraphDrawOptions
)
plt.show()
